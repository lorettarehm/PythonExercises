# Imports
from random import choice


def initialize(board):
    # Initialize game
    # Initialize grid
    initialize_grid(board)
    # Initialize score
    global gv_score
    gv_score = 0
    # Initialize turn number
    global gv_turn
    gv_turn = 1


def initialize_grid(board):
    # Initialize grid by reading in from file
    for i in range(len(board)):
        for j in range(len(board[i])):
            board[i][j] = choice(['Q', 'R', 'S', 'T', 'U'])


def continue_game(current_score, goal_score=100):
    # Return false if game should end, true if game is not over
    print("Checking to see if we should continue")
    if current_score >= goal_score:
        return False
    else:
        return True


def draw_board(board):
    # Display the board to the screen
    # Draw blank line first
    print("\n")
    # Calculate 4 characters per column on first row
    print(" " + ((4 * len(board[0])) + 1) * "-")
    # Now draw rows from 8 down to 1
    for i in range(len(board) - 1, -1, -1):
        # Draw each row
        line_to_draw = ""
        for j in range(len(board[i])):
            line_to_draw += " | " + board[i][j]
        line_to_draw += " | "
        print(line_to_draw)
        print(" " + ((4 * len(board[0])) + 1) * "-")


def get_move():
    # Get the move from the user
    print("Getting move")
    return "blue"


def update_board(board, move):
    # Update the board according to move
    print("Update board")


def convert_letter_to_col(col):
    # Valid range is a to h (8 columns)
    if col == 'a':
        return 0
    elif col == 'b':
        return 1
    elif col == 'c':
        return 2
    elif col == 'd':
        return 3
    elif col == 'e':
        return 4
    elif col == 'f':
        return 5
    elif col == 'g':
        return 6
    elif col == 'h':
        return 7
    else:
        # Not a valid column
        return -1


def swap_pieces(board, move):
    # Swap pieces on board according to move
    # Get original position
    origrow = int(move[1]) - 1
    origcol = convert_letter_to_col(move[0])

    # Get adjacent position
    # Up
    if move[2] == 'u':
        newrow = origrow + 1
        newcol = origcol
    # Down
    elif move[2] == 'd':
        newrow = origrow - 1
        newcol = origcol
    # Left
    elif move[2] == 'l':
        newrow = origrow
        newcol = origcol + 1
    # Right
    elif move[2] == 'r':
        newrow = origrow
        newcol = origcol - 1
    else:
        # Value not valid
        newrow = origrow
        newcol = origcol

    # Swap objects in two positions
    temp = board[origrow][origcol]
    board[origrow][origcol] = board[newrow][newcol]
    board[newrow][newcol] = temp


def do_round(board):
    # Perform one round of the game
    # Display current round
    draw_board(board)
    # Get move
    move = get_move()
    # Update board
    update_board(gv_board, move)
    print("Doing one round")
    # Update turn number
    global gv_turn
    gv_turn += 1


# State main variables
gv_score: int = 0
gv_goal_score = 100
gv_turn = 0
gv_board = [[0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0]]

# Initialize game
initialize(gv_board)

# Loop while game not over
while continue_game(gv_score, gv_goal_score):
    # Do a round of the game
    do_round(gv_board)
